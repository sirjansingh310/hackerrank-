import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;
/*
*@ Author:Sirjan Singh
*@ Problem :Roads And Libraries-Graph Theory
*@ Link :https://www.hackerrank.com/challenges/torque-and-development
*@ HackerRank profile : https://www.hackerrank.com/sirjansingh310
*/
class graph{
    private int nodes;
    private LinkedList<Integer> adj[];
    private boolean visited[];
    private int m;
    private long lib,road;
    private long cost;
    private long mincost=0;
    graph(int n,int m,long lib,long road){
        nodes=n;    
        this.m=m;
        this.lib=lib;
        this.road=road;
        cost=n*lib;
        adj=new LinkedList[nodes];
        visited=new boolean[nodes];
        for(int i=0;i<nodes;i++)
            adj[i]=new LinkedList<Integer>();
    }
    void addEdge(int v,int w){
        adj[v].add(w);
        adj[w].add(v);
    }
    void bfsUtil(){
       for(int i=0;i<nodes;i++){
           if(!visited[i])
               bfs(i);
       }
    }
    void bfs(int current){
        int count=0;
        visited[current]=true;
        LinkedList<Integer> q=new LinkedList<>();
        q.add(current);
        while(q.size()!=0){
            int s=q.poll();
            count++;
            Iterator<Integer> itr=adj[s].iterator();
            while(itr.hasNext()){
                int next=itr.next();
                if(!visited[next])
                {
                    visited[next]=true;
                    q.add(next);
                }
            }
        }
        count--;
        mincost=mincost+((count*road)+lib);
    }
    void print(){
        if(m==0){
            System.out.println(cost);
        }
        else
        System.out.println(mincost<cost&&mincost>0?mincost:cost);
    }
        
}
public class Solution {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int q = in.nextInt();
        for(int a0 = 0; a0 < q; a0++){
            int n = in.nextInt();
            int m = in.nextInt();
            long lib= in.nextLong();
            long road= in.nextLong();
            TreeSet<Integer> cityset=new TreeSet<>();
            graph g=new graph(n,m,lib,road);
            for(int a1 = 0; a1 < m; a1++){
                int city_1 = in.nextInt();
                int city_2 = in.nextInt();
                g.addEdge(city_1-1,city_2-1);
                cityset.add(city_1-1);
                cityset.add(city_2-1);
            }
            g.bfsUtil();
            g.print();
        }
        
    }
}
