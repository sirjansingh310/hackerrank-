/// problem : Jack Goes To Rapture
//// Implemented modified version of Dijsktra's algorithm 
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

public static int minDist(int dist[],boolean visit[]){
    int min = Integer.MAX_VALUE,min_index=-1;
    for(int i=0;i<dist.length;i++){
        if(!visit[i] && min>=dist[i]){
            min=dist[i];
            min_index=i;
        }
    }
    return min_index;
}
public static void main(String[] args) {
    /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
    Scanner in = new Scanner(System.in);
    int n = in.nextInt();
    int p = in.nextInt();
    int cost[][] = new int[n][n];
    int dist[] = new int[n];
    boolean visit[] = new boolean[n];
    for(int i=0;i<n;i++){
        dist[i]=Integer.MAX_VALUE;
        visit[i]=false;
        for(int j=0;j<n;j++){
            cost[i][j]=Integer.MAX_VALUE;
        }
    }
    while(p>0){
        int a=in.nextInt()-1;
        int b=in.nextInt()-1;
        int c=in.nextInt();
        if(cost[a][b]>c&&c>0 && c<10000001){
            cost[a][b]=c;
            cost[b][a]=c;
        }
        p--;
    }
    dist[0]=0;
    for(int i=0;i<n-1;i++){
        int u = minDist(dist,visit);
        visit[u]=true;
        for(int j=0;j<n;j++){
            if(!visit[j] && cost[u][j]!=Integer.MAX_VALUE && dist[u]!=Integer.MAX_VALUE){
                if((cost[u][j]>=dist[u])){
                    if(dist[j]>(cost[u][j]))
                        dist[j]=(cost[u][j]);
                }
                else{
                    if(dist[j]>=dist[u])
                    dist[j]=dist[u];
                }

            }
        }
    }
    if(dist[n-1]==Integer.MAX_VALUE){
        System.out.println("NO PATH EXISTS");
    }else{
    System.out.println(dist[n-1]);
    }
}}
