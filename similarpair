import java.util.*;
import java.io.*;
class graph{
    private int nodes;
    private boolean visited[];
    private LinkedList<Integer> adj[];
    private int k;
    private int count=0;
    graph(int v,int q){
        visited=new boolean[v];
        nodes=v;
        k=q;
        adj=new LinkedList[nodes];
        for(int i=0;i<nodes;i++)
            adj[i]=new LinkedList<Integer>();
        
    }
    void addEdge(int p,int c){
        adj[p].add(c);
    }
    void start(int parent){
        if(adj[parent].size()!=0){
        LinkedList<Integer> q=new LinkedList<>();
        q.add(parent);
        while(q.size()!=0){
         int s=   q.poll();
            Iterator<Integer> i=adj[s].iterator();
            while(i.hasNext()){
                int next=i.next();
                q.add(next);
               if(Math.abs(parent-next)<=k){count++;}
                 
            }
        }
       for(int i=0;i<adj[parent].size();i++)
           start(adj[parent].get(i));
      
        }
    }
    void print(){
        System.out.println(count);
    }
   
    
}
class sol{
    public static void main(String args[]){
        Scanner sc=new Scanner(System.in);
        int v=sc.nextInt();
        int k=sc.nextInt();
        int parent=0;
        graph g=new graph(v,k);
        for(int i=0;i<v-1;i++){
            int a=sc.nextInt();
            int b=sc.nextInt();
            if(i==0)
                parent=a;
            g.addEdge(a-1,b-1);
        }
        g.start(parent-1);
        g.print();
        
    }
}
