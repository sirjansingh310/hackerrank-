import java.util.*;
/*
Problem Link :https://www.hackerrank.com/challenges/count-luck
Strategy Used : BFS 
the main idea is to store the number of waves made in prev[][] array. If more than one path exists, we increment wave count  else 
we consider the number of waves of child as number of waves of parent.
*/
class graph{
    private char mat[][];
    private int m,n,k;
    private int dist[][];
    private int x[]={-1,1,0,0};
    private int y[]={0,0,1,-1};
    private int prev[][];
    private int w=0;
    graph(char mat[][],int n,int m,int k){
        this.m=m;
        this.n=n;
        this.mat=mat;
        this.k=k;
        prev=new int[n][m];
        dist=new int[n][m];
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                dist[i][j]=-1;
            }
        }
    }
    void bfs(int start_x,int start_y,int end_x,int end_y){
        LinkedList<Integer> queue=new LinkedList<>();
        queue.add(start_x);
        queue.add(start_y);
        dist[start_x][start_y]=0;
        while(queue.size()>0){
            int X=queue.poll();
            int Y=queue.poll();
            int nextX=0,nextY=0;
            int c=0;
            boolean b=false;
             for(int i=0;i<4;i++){
                nextX=X+x[i];
                nextY=Y+y[i];
                if(nextX>=0 && nextX<n && nextY>=0 && nextY<m){
                    if(mat[nextX][nextY]!='X' && mat[X][Y]!='*' && dist[nextX][nextY]==-1){
                        c++;
                        if(c>=2 && !b){
                            b=true;
                            prev[X][Y]++;
                            break;
                        }
                        
                    }
                }
            }
            for(int i=0;i<4;i++){
                nextX=X+x[i];
                nextY=Y+y[i];
                if(nextX>=0 && nextX<n && nextY>=0 && nextY<m){
                    if(mat[nextX][nextY]!='X' && dist[nextX][nextY]==-1){
                        dist[nextX][nextY]=dist[X][Y]+1;
                        queue.add(nextX);
                        queue.add(nextY);
                        prev[nextX][nextY]=prev[X][Y];
                        
                    }
                }
            }
        }
       // System.out.println(prev[end_x][end_y]);
        if(prev[end_x][end_y]==k)
            System.out.println("Impressed");
        else
            System.out.println("Oops!");
    }
    
}
class mainclass{
    public static void main(String args[]){
        Scanner sc=new Scanner(System.in);
        int t=sc.nextInt();
        while(t-->0){
            int n=sc.nextInt(),m=sc.nextInt();
            char mat[][]=new char[n][m];
            String s;
            int start_x=0,start_y=0,end_x=0,end_y=0;
            for(int i=0;i<n;i++){
                s=sc.next();
                for(int j=0;j<m;j++){
                    mat[i][j]=s.charAt(j);
                    if(s.charAt(j)=='M'){
                        start_x=i;
                        start_y=j;
                    }
                    if(s.charAt(j)=='*'){
                        end_x=i;
                        end_y=j;
                    }
                }
            }
           
            int k=sc.nextInt();
            graph g=new graph(mat,n,m,k);
            g.bfs(start_x,start_y,end_x,end_y);
        }
    }
}
