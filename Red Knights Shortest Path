import java.util.*;
// World CodeSprint 12
class graph{
    private int n;
    private LinkedList<Integer> adj[][];
    private int board[][];
    private int row[]={-2,-2,0,0,2,2};// UL UR L R LL LR
    private int col[]={-1,1,-2,2,-1,1};
    private int parent[][][];
    graph(int n){
        this.n=n;
        board=new int[n][n];//nodes
        parent =new int[n][n][2];
        for(int i=0;i<n;i++){
           Arrays.fill(board[i],-1);
        }
    }
    void bfs(int start_x , int start_y , int end_x, int end_y){
        LinkedList<Integer> q=new LinkedList<Integer>();
        q.add(start_x);
        q.add(start_y);
        parent[start_x][start_y][0]=999;
        parent[start_x][start_y][1]=999;
        board[start_x][start_y]=0;// source zero
        while(q.size()>0){
            int parent_x=q.poll();
            int parent_y=q.poll();
            for(int i=0;i<6;i++){
                int child_x=parent_x+row[i];
                int child_y=parent_y+col[i];
                if(child_x>=0 && child_x<n && child_y>=0 && child_y<n){
                    if(board[child_x][child_y]==-1){// make sure unvisited
                    board[child_x][child_y]=board[parent_x][parent_y]+1;
                    parent[child_x][child_y][0]=parent_x;
                    parent[child_x][child_y][1]=parent_y;
                    q.add(child_x);
                    q.add(child_y);
                }
                    else if(board[child_x][child_y]!=-1){// already visited but we try to prioritize
                       
                        /// UL, UR, R, LR, LL, L
                        int temp=board[parent_x][parent_y]+1;
                        if(temp==board[child_x][child_y]){
                            int oldX=child_x-parent[child_x][child_y][0];
                            int oldY=child_y-parent[child_x][child_y][1];
                             
                            int moveX=child_x-parent_x;
                            int moveY=child_y-parent_y;
                            
                            if(oldX==0 && oldY==2 &&((moveX==2&&moveY==1)||(moveX==2&&moveY==-1)||(moveX==0&&moveY==-1)||(moveX==-2&&moveY==-1)||(moveX==-2&&moveY==1))){//L
                                parent[child_x][child_y][0]=parent_x;
                                parent[child_x][child_y][1]=parent_y;
                                 oldX=child_x-parent[child_x][child_y][0];
                                 oldY=child_y-parent[child_x][child_y][1];
                            }
                                if(oldX==2 && oldY==1 && ((moveX==2&&moveY==-1)||(moveX==0&&moveY==-1)||(moveX==-2&&moveY==-1)||(moveX==-2&&moveY==1))){//LL
                                parent[child_x][child_y][0]=parent_x;
                                parent[child_x][child_y][1]=parent_y;
                                 oldX=child_x-parent[child_x][child_y][0];
                                 oldY=child_y-parent[child_x][child_y][1]; 
                            }
                               if(oldX==2 && oldY==-1&&((moveX==0&&moveY==-1)||(moveX==-2&&moveY==-1)||(moveX==-2&&moveY==1))){//LR
                                parent[child_x][child_y][0]=parent_x;
                                parent[child_x][child_y][1]=parent_y;
                                 oldX=child_x-parent[child_x][child_y][0];
                                 oldY=child_y-parent[child_x][child_y][1];
                            }
                              if(oldX==0 && oldY==-2&&((moveX==-2&&moveY==-1)||(moveX==-2&&moveY==1))){//R
                                parent[child_x][child_y][0]=parent_x;
                                parent[child_x][child_y][1]=parent_y;
                                 oldX=child_x-parent[child_x][child_y][0];
                                 oldY=child_y-parent[child_x][child_y][1];
                            }
                             if(oldX==-2 && oldY==-1 &&((moveX==-2&&moveY==1))){//UR
                                parent[child_x][child_y][0]=parent_x;
                                parent[child_x][child_y][1]=parent_y;
                                 oldX=child_x-parent[child_x][child_y][0];
                                 oldY=child_y-parent[child_x][child_y][1];
                            }
                            
                        }
                        
                        }
                }
            }
        }
        if(board[end_x][end_y]!=-1){
           System.out.println(board[end_x][end_y]);
            int x,y;
            int size=board[end_x][end_y];
            String path[]=new String[size];
            int a=end_x,b=end_y;
            int k=0;
            while(true){
                x=parent[a][b][0];
                y=parent[a][b][1];
                if(x==999 && y==999)
                    break;
                if(a-x==2 && b-y==1)
                    path[k]="LR";
                else if(a-x==2 && b-y==-1)
                    path[k]="LL";
                else if(a-x==0 && b-y==2)
                    path[k]="R";
                else if(a-x==0 && b-y==-2)
                    path[k]="L";
                else if(a-x==-2 && b-y==1)
                    path[k]="UR";
                else if(a-x==-2 && b-y==-1)
                    path[k]="UL";
                a=x;
                b=y;
                k++;
                
            }
            if(path[0]=="UL" || path[0]=="UR"||path[0]=="R")
            for(int i=0;i<size;i++){
                System.out.print(path[i]+" ");
            }
            else
                for(int i=size-1;i>=0;i--){
                    System.out.print(path[i]+" ");
                }
        }
        else
            System.out.println("Impossible");
        
    }
    
    
}

class mainclass{
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int start_x=sc.nextInt(),start_y=sc.nextInt(),end_x=sc.nextInt(),end_y=sc.nextInt();
        graph g=new graph(n);
        g.bfs(start_x,start_y,end_x,end_y);
    }
}
